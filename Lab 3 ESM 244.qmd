---
title: "Lab 3 Part 1 ESM 244"
author: "Kyle Burt"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(broom)

### spatial packages
library(sf)
library(tmap)
```

## Read in data

```{r}
ca_counties_raw_sf <- read_sf(here("data", "ca_counties", 
                                   "CA_Counties_TIGER2016.shp"))

ca_counties_sf <- ca_counties_raw_sf |>
  janitor::clean_names() |>
  mutate(land_km2 = aland / 1e6) |>
  select(county = name, land_km2)

ca_counties_df <- ca_counties_sf |>
  as.data.frame() |>
  select(-geometry)
```

## Check CRS

```{r}
ca_counties_sf |> st_crs()
```

## Visual exploration

```{r}
plot(ca_counties_sf |> select(land_km2))
```

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf, aes(fill = land_km2), color = "white", 
          size = 0.1) +
  theme_void() +
  scale_fill_gradientn(colors = c("cyan", "blue", "purple"))
```

## Read in sesbania records

```{r}
sesbania_sf <- read_sf(here("data/red_sesbania/ds80_for_lab.gpkg")) |>
  janitor::clean_names()

sesbania_sf |> st_crs()

plot(sesbania_sf |> select(id))
```

## The analysis:

Find count of red sesbania observed locations in this dataset, by county, then create a map of all CA counties using the fill color to indicate sesbania count

### Pseudocode:

full join
get the two datasets into the same coordinate reference system
get county boundary coordinates to match up with coordinates of sesbania
spatial join (match up the datasets)

scale_fill_gradientn(colors = c("", "", ""))

## Transform the CRS so records match counties

```{r}
sesbania_3857_sf <- st_transform(sesbania_sf, 3857)
sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf))

st_crs(sesbania_3857_sf)
```

## Plot the two together

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf) +
  geom_sf(data = sesbania_3857_sf, size = 1, color = "red")
```

## Spatial join

```{r}
ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf)

sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf)
```

## Summarize by county

Choropleth

```{r}
sesb_counts_sf <- ca_sesb_sf |>
  group_by(county) |>
  summarize(n_records = sum(!is.na(id)))

ggplot() +
  geom_sf(data = sesb_counts_sf, aes(fill = n_records), color = "gray90", 
          size = 1) +
  scale_fill_gradientn(colors = c("lightgrey", "orange", "red")) +
  theme_minimal() +
  labs(fill = "Number of S. punicea records")
```

## Next analysis:

For the county with the greatest number of red sesbania records, make a map of those locations and where they occur within the county

### Pseudocode:

-Figure out the county with the most records (filter to isolate it)
-Take subset of other location info (watershed or location)
-Use sesb_ca_sf

```{r}
county_max <- sesb_counts_sf |>
  filter(n_records == max(n_records)) |>
  # slice_max(n_records, 1) does the same thing as above
  pull(county)

solano_sesb_sf <- sesb_ca_sf |>
  filter(county == county_max)

solano_sf <- ca_counties_sf |>
  filter(county %in% county_max)

ggplot() +
  geom_sf(data = solano_sf) +
  geom_sf(data = solano_sesb_sf, color = "red")
```

# Making an interactive map with tmap

```{r}
#| eval: false
#| include: true

### set the viewing mode to interactive
tmap_mode(mode = "view")

tm_shape(ca_counties_sf) +
  tm_fill("land_km2", palatte = "BuGn") +
  tm_shape(sesbania_sf) +
  tm_dots()
```





